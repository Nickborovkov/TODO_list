{"version":3,"sources":["components/todoList/item/itemMedia.module.css","redux/todoReducer.js","components/todoList/item/Item.jsx","components/todoList/addItemForm/addItemForm.jsx","components/todoList/todoList.jsx","App.js","reportWebVitals.js","redux/store.js","index.js","components/todoList/addItemForm/addItemForm.module.css","components/todoList/addItemForm/addItemFormMedia.module.css","components/todoList/item/item.module.css","components/todoList/todoList.module.css","components/todoList/todoListMedia.module.css"],"names":["module","exports","GET_ITEMS","ADD_ITEM","DELETE_ITEM","COMPLETE_ITEM","COMPLETE_ALL_ITEMS","initialState","items","todoReducer","state","action","type","newItemsArray","i","localStorage","length","resultString","JSON","parse","getItem","String","push","id","itemText","isCompleted","currentDate","itemsArray","months","days","now","Date","formatDate","date","currentHours","getHours","currentMinutes","getMinutes","currentSeconds","getSeconds","newDate","getFullYear","getMonth","getDay","setItem","stringify","itemsDeleteArray","itemId","clear","itemsCompleteArray","Item","item","filterType","arrForClass","styles","itemDone","media","dispatch","useDispatch","className","cn","itemBody","itemCompleted","itemTime","itemInner","buttonHolder","button","buttonCancel","onClick","AddNewItem","validationSchema","yup","shape","required","max","initialValues","validateOnBlur","onSubmit","values","resetForm","errors","touched","handleChange","handleBlur","handleSubmit","isValid","dirty","form","errorArea","input","name","onChange","onBlur","value","placeholder","disabled","TodoList","useSelector","todo","useEffect","useState","filtersVisible","setFiltersVisible","hideFilters","setFilterType","todoBody","title","filterButton","filters","filter","itemsReplace","itemsList","map","completeAll","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","store","createStore","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b41f8af2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"itemBody\":\"itemMedia_itemBody__1P2M9\",\"item\":\"itemMedia_item__1W3dv\",\"buttonHolder\":\"itemMedia_buttonHolder__xGTvj\",\"button\":\"itemMedia_button__3xxOI\",\"itemDone\":\"itemMedia_itemDone__229ig\",\"itemUndone\":\"itemMedia_itemUndone__1c9fx\"};","const GET_ITEMS = `todo/GET_ITEMS`\r\nconst ADD_ITEM = `todo/ADD_ITEM`\r\nconst DELETE_ITEM = `todo/DELETE_ITEM`\r\nconst COMPLETE_ITEM = `todo/COMPLETE_ITEM`\r\nconst COMPLETE_ALL_ITEMS = `todo/COMPLETE_ALL_ITEMS`\r\n\r\n\r\nconst initialState = {\r\n    items: [],\r\n}\r\n\r\nconst todoReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case GET_ITEMS:\r\n            //Getting items from localStorage\r\n            const newItemsArray = []\r\n            for (let i = 1; i <= localStorage.length; i ++){\r\n                const resultString = JSON.parse(localStorage.getItem(String(i)))\r\n                newItemsArray.push(\r\n                    {id: resultString[0],\r\n                        itemText: resultString[1],\r\n                        isCompleted: resultString[2],\r\n                        currentDate: resultString[3]}\r\n                )\r\n            }\r\n            return {\r\n                //Setting items to UI\r\n                ...state,\r\n                items: newItemsArray\r\n            }\r\n        case ADD_ITEM:\r\n            const itemsArray = [...state.items]\r\n            //Getting date when item was added\r\n            const months = [`Jan`,`Feb`,`Mar`,`Apr`,`May`,`Jun`,`Jul`,`Aug`,`Sep`,`Oct`,`Nov`,`Dec`]\r\n            const days = [`Mon`,`Tue`,`Wed`,`Thu`,`Fri`,`Sat`,`Sun`]\r\n            const now = new Date()\r\n\r\n            //Formatting date\r\n            const formatDate = (date) => {\r\n                if(String(date).length <= 1) return `0${String(date)}`\r\n                return String(date)\r\n            }\r\n            const currentHours = formatDate(now.getHours())\r\n            const currentMinutes = formatDate(now.getMinutes())\r\n            const currentSeconds = formatDate(now.getSeconds())\r\n\r\n            //Setting date\r\n            const newDate = `${now.getFullYear()} / ${months[now.getMonth()]} / ${days[now.getDay() - 1]} \r\n            / ${currentHours}:${currentMinutes}:${currentSeconds}`\r\n            //Setting new item to localStorage\r\n            localStorage.setItem(`${itemsArray.length + 1}`,\r\n                JSON.stringify(\r\n                    [itemsArray.length + 1,\r\n                    action.itemText,\r\n                    false,\r\n                    newDate])\r\n                )\r\n            return {\r\n                //Adding items to UI\r\n                ...state,\r\n                items: [...state.items, {id: itemsArray.length + 1,\r\n                    itemText: action.itemText,\r\n                    isCompleted :false,\r\n                    currentDate: newDate\r\n                }],\r\n            }\r\n        case DELETE_ITEM:\r\n            let itemsDeleteArray = []\r\n            //Getting items from localStorage\r\n            for (let i = 1; i <= localStorage.length; i++){\r\n                const resultString = JSON.parse(localStorage.getItem(String(i)))\r\n                if(resultString[0] !== action.itemId){\r\n                    itemsDeleteArray.push({id: itemsDeleteArray.length + 1,\r\n                        itemText: resultString[1],\r\n                        isCompleted: resultString[2],\r\n                        currentDate: resultString[3]})\r\n                }\r\n            }\r\n            //Clearing localStorage\r\n            localStorage.clear()\r\n            //Setting items again (this is needed for correct items id)\r\n            for (let i = 0; i <= itemsDeleteArray.length - 1; i++){\r\n                localStorage.setItem(`${itemsDeleteArray[i].id}`,\r\n                    JSON.stringify([itemsDeleteArray[i].id,\r\n                        itemsDeleteArray[i].itemText,\r\n                        itemsDeleteArray[i].isCompleted,\r\n                        itemsDeleteArray[i].currentDate]))\r\n            }\r\n            return {\r\n                //Setting items to UI\r\n                ...state,\r\n                items: itemsDeleteArray,\r\n            }\r\n        case COMPLETE_ITEM:\r\n            //Getting items from localStorage and rewriting them with conditions\r\n            for (let i = 1; i <= localStorage.length; i++){\r\n                const resultString = JSON.parse(localStorage.getItem(String(i)))\r\n                if(resultString[0] === action.itemId){\r\n                    if(resultString[2] === false){\r\n                        localStorage.setItem(`${resultString[0]}`,\r\n                            JSON.stringify(\r\n                                [resultString[0],\r\n                                resultString[1],\r\n                                true,\r\n                                resultString[3]])\r\n                        )\r\n                    } else if(resultString[2] === true){\r\n                        localStorage.setItem(`${resultString[0]}`,\r\n                            JSON.stringify(\r\n                                [resultString[0],\r\n                                resultString[1],\r\n                                false,\r\n                                resultString[3]])\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n            let itemsCompleteArray = [...state.items]\r\n            for (let i = 0; i <= state.items.length - 1; i++) {\r\n                if(itemsCompleteArray[i].id === action.itemId){\r\n                    itemsCompleteArray[i].isCompleted = true\r\n                        ? itemsCompleteArray[i].isCompleted === false\r\n                        : itemsCompleteArray[i].isCompleted === true\r\n                }\r\n            }\r\n            return {\r\n                //Setting items to UI\r\n                ...state,\r\n                items: [...state.items]\r\n            }\r\n        case COMPLETE_ALL_ITEMS:\r\n            //Clearing localStorage\r\n            localStorage.clear()\r\n            return {\r\n                //Setting items to UI\r\n                ...state,\r\n                items: []\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default todoReducer\r\n\r\n\r\n//Action creators\r\nexport const getItems = () =>\r\n    ( { type: GET_ITEMS } )\r\n\r\nexport const addItem = (itemText) =>\r\n    ( { type: ADD_ITEM, itemText} )\r\n\r\nexport const deleteItem = (itemId) =>\r\n    ( { type: DELETE_ITEM, itemId } )\r\n\r\nexport const completeItem = (itemId) =>\r\n    ( { type: COMPLETE_ITEM, itemId } )\r\n\r\nexport const completeAllItem = () =>\r\n    ( { type: COMPLETE_ALL_ITEMS } )\r\n\r\n","import React from \"react\";\r\nimport styles from './item.module.css'\r\nimport media from './itemMedia.module.css'\r\nimport cn from 'classnames'\r\nimport { AiFillDelete } from 'react-icons/ai';\r\nimport { AiOutlineCheck } from 'react-icons/ai';\r\nimport { AiOutlineClose } from 'react-icons/ai';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {completeItem, deleteItem} from \"../../../redux/todoReducer\";\r\n\r\nconst Item = ({item, filterType}) => {\r\n\r\n    const arrForClass = [styles.itemDone, media.itemDone]\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    return (\r\n        // Filters show chosen elements with adding/deleting needed css style\r\n        <div className={cn(styles.itemBody, media.itemBody,\r\n                            filterType === `done` && !item.isCompleted && arrForClass,\r\n                           filterType === `undone` && item.isCompleted && arrForClass)\r\n        }>\r\n            <div className={cn(styles.item, media.item, item.isCompleted && styles.itemCompleted)}>\r\n                <p className={styles.itemTime}>{item.currentDate}</p>\r\n                <p className={styles.itemInner}>{item.itemText}</p>\r\n            </div>\r\n\r\n\r\n            <div className={cn(styles.buttonHolder, media.buttonHolder)}>\r\n                <button className={cn(styles.button, media.button,\r\n                    item.isCompleted && styles.buttonCancel)}\r\n                        onClick={() => { dispatch(completeItem(item.id)) }}>\r\n                    {item.isCompleted ? <AiOutlineClose/> : <AiOutlineCheck/>}\r\n                </button>\r\n                <button className={cn(styles.button, media.button)}\r\n                        onClick={ () => {\r\n                            dispatch(deleteItem(item.id))\r\n                        }}>\r\n                    <AiFillDelete/>\r\n                </button>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Item\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport styles from './addItemForm.module.css'\r\nimport media from './addItemFormMedia.module.css'\r\nimport cn from 'classnames'\r\nimport {Formik} from \"formik\";\r\nimport * as yup from 'yup'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {addItem} from \"../../../redux/todoReducer\";\r\n\r\nconst AddNewItem = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const validationSchema = yup.object().shape({\r\n        itemText: yup\r\n            .string()\r\n            .required(`Goal can't be empty`)\r\n            .max(300, `Max length is 300 symbols`)\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={{\r\n                    itemText: ''\r\n                }}\r\n                validateOnBlur\r\n                onSubmit = { (values, {resetForm}) =>{\r\n                    dispatch(addItem(values.itemText))\r\n                    resetForm({values: ``})\r\n                } }\r\n                validationSchema={validationSchema}\r\n            >\r\n                { ({ values, errors, touched, handleChange, handleBlur, handleSubmit,\r\n                   isValid, dirty}) => (\r\n                    <div className={cn(styles.form, media.form)}>\r\n                        {touched.itemText && errors.itemText &&\r\n                        <div className={cn(styles.errorArea, media.errorArea)}>{errors.itemText}</div>}\r\n                        <input\r\n                            className={cn(styles.input, media.input)}\r\n                            type = 'text'\r\n                            name = 'itemText'\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            value={values.itemText}\r\n                            placeholder='Add a goal here...'/>\r\n\r\n\r\n\r\n                        <button className={cn(styles.button, media.button)}\r\n                                disabled={!isValid && !dirty}\r\n                                onClick={handleSubmit}\r\n                                type={'submit'}>Add</button>\r\n                    </div>\r\n                ) }\r\n            </Formik>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddNewItem","import React, {useEffect, useState} from \"react\";\r\nimport Item from \"./item/Item\";\r\nimport AddNewItem from \"./addItemForm/addItemForm\";\r\nimport styles from './todoList.module.css'\r\nimport media from './todoListMedia.module.css'\r\nimport cn from 'classnames'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {completeAllItem, getItems} from \"../../redux/todoReducer\";\r\n\r\nconst TodoList = () => {\r\n\r\n    const items = useSelector(state => state.todo.items)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(()=>{\r\n        dispatch(getItems())\r\n    },[])\r\n\r\n    //Setting visibility of filters button\r\n    const [filtersVisible, setFiltersVisible] = useState(false)\r\n    const showFilters = () => {\r\n        setFiltersVisible(true)\r\n    }\r\n    const hideFilters = () => {\r\n        setFiltersVisible(false)\r\n    }\r\n\r\n    //Setting filter type for items\r\n    const [filterType, setFilterType] = useState(`all`)\r\n    const seeAllItems = () => {\r\n        setFilterType(`all`)\r\n        hideFilters()\r\n    }\r\n    const seeDoneItems = () => {\r\n        setFilterType(`done`)\r\n        hideFilters()\r\n    }\r\n    const seeUndoneItems = () => {\r\n        setFilterType(`undone`)\r\n        hideFilters()\r\n    }\r\n\r\n\r\n        return <div className={cn(styles.todoBody, media.todoBody)}>\r\n            <h2 className={cn(styles.title, media.title)}>Plan for today:</h2>\r\n            <AddNewItem/>\r\n\r\n            {/*Button shows only when filtersVisible = false and items array exists*/}\r\n            {\r\n                items.length > 0 && !filtersVisible &&\r\n                <button className={cn(styles.filterButton, media.filterButton)}\r\n                        onClick={showFilters}>Filters</button>\r\n            }\r\n\r\n            {/*Filters show only when filtersVisible = true and items array exists*/}\r\n            {\r\n                items.length > 0 && filtersVisible &&\r\n                <div className={cn(styles.filters, media.filters)}>\r\n                    <button className={cn(styles.filter, media.filter)}\r\n                            onClick={seeAllItems} >All</button>\r\n                    <button className={cn(styles.filter, media.filter)}\r\n                            onClick={seeDoneItems} >Done</button>\r\n                    <button className={cn(styles.filter, media.filter)}\r\n                            onClick={seeUndoneItems} >Undone</button>\r\n                </div>\r\n            }\r\n\r\n            {/*Items array shows only when exists*/}\r\n            {\r\n                items.length === 0\r\n                    ? <h3 className={cn(styles.itemsReplace, media.itemsReplace)}>Add your daily goals here to\r\n                        be shure you won't forget something </h3>\r\n                    : <div className={cn(styles.itemsList, media.itemsList)}>\r\n                        {\r\n                            items.map(i => <Item key={i.id}\r\n                                                 item={i}\r\n                                                 filterType={filterType}/>)\r\n                        }\r\n                    </div>\r\n            }\r\n\r\n\r\n            {/*CompleteAll button show only items array exists*/}\r\n            {\r\n                items.length > 0 &&\r\n                <button className={cn(styles.completeAll, media.completeAll)}\r\n                        onClick={ () => {dispatch(completeAllItem())} }>Complete all</button>\r\n            }\r\n\r\n        </div>\r\n}\r\n\r\nexport default TodoList","import './App.css';\r\nimport React from \"react\";\r\nimport TodoList from \"./components/todoList/todoList\";\r\n\r\nconst App = () => {\r\n  return <TodoList />\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport todoReducer from \"./todoReducer\";\r\n\r\nconst reducers = combineReducers({\r\n    todo: todoReducer,\r\n})\r\n\r\n\r\nconst store = createStore(reducers)\r\n\r\nexport default store\r\n\r\nwindow.store = store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from \"react-redux\";\r\nimport store from \"./redux/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>, document.getElementById('root')\r\n);\r\n\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"addItemForm_form__1vwv_\",\"input\":\"addItemForm_input__3G10G\",\"button\":\"addItemForm_button__2q_na\",\"errorArea\":\"addItemForm_errorArea__1lJJD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"addItemFormMedia_form__1rNKW\",\"input\":\"addItemFormMedia_input__1pmoS\",\"button\":\"addItemFormMedia_button__yavoG\",\"errorArea\":\"addItemFormMedia_errorArea__2KqvZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"itemBody\":\"item_itemBody__1GFYn\",\"item\":\"item_item__3WCyd\",\"itemTime\":\"item_itemTime__fwEXz\",\"itemInner\":\"item_itemInner__SfE-6\",\"itemCompleted\":\"item_itemCompleted__39tWU\",\"buttonHolder\":\"item_buttonHolder___LPx5\",\"button\":\"item_button__3Irk0\",\"buttonCancel\":\"item_buttonCancel__3OaGb\",\"itemDone\":\"item_itemDone__2HtJ3\",\"itemUndone\":\"item_itemUndone__1n3wF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoBody\":\"todoList_todoBody__1IlaL\",\"title\":\"todoList_title__XfVZH\",\"filterSection\":\"todoList_filterSection__2rcq2\",\"filterButton\":\"todoList_filterButton__3TqyC\",\"filters\":\"todoList_filters__x14Vr\",\"filter\":\"todoList_filter__1Aor8\",\"itemsReplace\":\"todoList_itemsReplace__3wFAj\",\"itemsList\":\"todoList_itemsList__3QujR\",\"completeAll\":\"todoList_completeAll__1KzuG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoBody\":\"todoListMedia_todoBody__3HUDQ\",\"title\":\"todoListMedia_title__2-BG0\",\"itemsList\":\"todoListMedia_itemsList__3nk7e\",\"filterButton\":\"todoListMedia_filterButton__1d5Y1\",\"filters\":\"todoListMedia_filters__uRqLl\",\"filter\":\"todoListMedia_filter__YUrn4\",\"itemsReplace\":\"todoListMedia_itemsReplace__cH1kC\",\"completeAll\":\"todoListMedia_completeAll__2z5qk\"};"],"sourceRoot":""}